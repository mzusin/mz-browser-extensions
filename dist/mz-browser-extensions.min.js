/* 
mz-browser-extensions v1.0.2
TypeScript-based library for managing browser extensions.
https://github.com/mzusin/mz-browser-extensions  
Copyright (c) 2023-present, Miriam Zusin          
*/
var m=(t,o,e)=>new Promise((r,n)=>{var s=c=>{try{i(e.next(c))}catch(l){n(l)}},a=c=>{try{i(e.throw(c))}catch(l){n(l)}},i=c=>c.done?r(c.value):Promise.resolve(c.value).then(s,a);i((e=e.apply(t,o)).next())});var x=()=>new Promise((t,o)=>{try{chrome.tabs.query({active:!0,currentWindow:!0},e=>{if(!e||e.length<=0){o(null);return}t(e[0])})}catch(e){o(e)}}),h=t=>new Promise((o,e)=>{chrome.tabs.getZoom(t,r=>{o(r)})});var p=t=>new Promise((o,e)=>{try{chrome.storage.sync.get([t],r=>{if(!r||!r[t]){o(null);return}let n=JSON.parse(r[t]);o(n)})}catch(r){console.error(r),e(r)}}),w=t=>new Promise((o,e)=>{try{chrome.storage.local.get([t],r=>{if(!r||!r[t]){o(null);return}let n=JSON.parse(r[t]);o(n)})}catch(r){console.error(r),e(r)}}),P=t=>new Promise((o,e)=>{try{chrome.storage.session.get([t],r=>{if(!r||!r[t]){o(null);return}let n=JSON.parse(r[t]);o(n)})}catch(r){console.error(r),e(r)}}),y=()=>new Promise((t,o)=>{try{chrome.storage.sync.get(null,e=>{t(e)})}catch(e){console.error(e),o(e)}}),d=()=>new Promise((t,o)=>{try{chrome.storage.local.get(null,e=>{t(e)})}catch(e){console.error(e),o(e)}}),f=(t,o)=>new Promise((e,r)=>{try{let n=JSON.stringify(o);chrome.storage.sync.set({[t]:n},()=>{e()})}catch(n){console.error(n),r(n)}}),S=(t,o)=>new Promise((e,r)=>{try{let n=JSON.stringify(o);chrome.storage.local.set({[t]:n},()=>{e()})}catch(n){console.error(n),r(n)}}),T=(t,o)=>new Promise((e,r)=>{try{let n=JSON.stringify(o);chrome.storage.session.set({[t]:n},()=>{e()})}catch(n){console.error(n),r(n)}}),v=t=>new Promise((o,e)=>{try{chrome.storage.sync.remove(t,()=>{o(null)})}catch(r){e(r)}}),b=t=>new Promise((o,e)=>{try{chrome.storage.local.remove(t,()=>{o(null)})}catch(r){e(r)}}),D=t=>new Promise((o,e)=>{try{chrome.storage.session.remove(t,()=>{o(null)})}catch(r){e(r)}}),F=()=>new Promise((t,o)=>{try{chrome.storage.sync.clear(()=>{t(null)})}catch(e){o(e)}}),O=()=>new Promise((t,o)=>{try{chrome.storage.local.clear(()=>{t(null)})}catch(e){o(e)}}),N=()=>new Promise((t,o)=>{try{chrome.storage.session.clear(()=>{t(null)})}catch(e){o(e)}});var J=(t,o)=>new Promise((e,r)=>{try{chrome.cookies.getAll({domain:t,name:o},n=>{e(n)})}catch(n){console.error(n),r()}}),k=(t,o,e)=>new Promise((r,n)=>{try{chrome.cookies.set({url:t,name:o,value:e},()=>{r()})}catch(s){console.error(s),n()}}),A=(t,o)=>new Promise((e,r)=>{try{chrome.cookies.remove({url:t,name:o},()=>{e()})}catch(n){console.error(n),r()}});var C=t=>new Promise((o,e)=>{chrome.tabs.captureVisibleTab({format:t,quality:100},r=>{if(chrome.runtime.lastError){console.error(chrome.runtime.lastError),e(null);return}o(r)})});var H=(t,o)=>new Promise((e,r)=>{try{chrome.downloads.download({url:t,filename:o},n=>{e(n)})}catch(n){console.error(n),r()}}),I=t=>new Promise((o,e)=>{m(void 0,null,function*(){try{let r=yield window.showOpenFilePicker({types:t});if(!r||r.length<=0){e();return}let n=r[0],a=yield(yield n.getFile()).text();o({name:n.name,text:a})}catch(r){e(r)}})}),W=(t,o,e)=>new Promise((r,n)=>{m(void 0,null,function*(){try{let a=yield(yield window.showSaveFilePicker({types:t,suggestedName:o})).createWritable();yield a.write(e),yield a.close(),r()}catch(s){n(s)}})});var Z=(t,o,e)=>new Promise((r,n)=>{try{chrome.devtools.panels.create(t,o,e,s=>{r(s)})}catch(s){console.error(s),n()}});export{C as captureVisibleAreaScreenshot,O as clearLocalStorage,N as clearSessionStorage,F as clearSyncStorage,Z as createDevtoolsPanel,b as deleteLocalData,D as deleteSessionData,v as deleteSyncData,H as download,x as getActiveTab,y as getAllSyncData,J as getCookie,I as getFile,w as getLocalData,d as getLocalSyncData,P as getSessionData,p as getSyncData,h as getTabZoom,A as removeCookie,W as saveFile,k as setCookie,S as setLocalData,T as setSessionData,f as setSyncData};
